@startuml lories.core.configs.configurator.Configurator
set namespaceSeparator none
class "Configurator" as lories.core.configs.configurator.Configurator {
  context: Context
  configs: Configurations
  {abstract}configure(configs: Configurations) -> None
  is_configured() -> bool
  is_enabled() -> bool
}
class "Configurations" as lories.core.configs.configurations.Configurations {
  name: str
  path: pathlib.Path
  sections -> List[Configurations]
  dirs: Directories
  enabled: bool
  get(key: str, default: Any) -> Any
  get_bool(key: str, default: bool) -> bool
  get_date(key: str, default: dt.datetime | pd.Timestamp) -> pd.Timestamp
  get_float(key: str, default: float) -> float
  get_int(key: str, default: int) -> int
  get_section(section: str, defaults: Optional[Mapping[str, Any]]) -> Configurations
  has_section(section: str) -> bool
  move_to_bottom(key: str) -> None
  move_to_top(key: str) -> None
  set(key: str, value: Any, replace: bool) -> None
  update(u: Mapping[str, Any], replace: bool) -> None
  copy() -> Configurations
}
class "Directories" as lories.core.configs.directories.Directories {
  conf: Directory
  data: Directory
  lib: Directory
  log: Directory
  tmp: Directory
  to_dict() -> Dict[str, Optional[str]]
  update(configs: Mapping[str, str]) -> None
}
class "Directory" as lories.core.configs.directories.Directory {
  default : str
  is_default() -> bool
}
lories.core.configs.configurator.Configurator o-- lories.core.configs.configurations.Configurations : __configs
lories.core.configs.configurations.Configurations *-- lories.core.configs.directories.Directories : __dirs
lories.core.configs.directories.Directories *-- lories.core.configs.directories.Directory : _conf, _data, _lib, _log, _tmp
@enduml
